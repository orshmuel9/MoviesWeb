
// לא עובד
const appReducer = (state = {users:{},action)=>{
    switch (action.type){
        case "ADD":
            {
                return { ...state, users: [...state.users, action.payload] }
            }
        case "UPDATE":
            {
                let index=state.findIndex(x=>x.userJson.id==action.payload.id);
                let arr=[...state];
                arr[index]=action.payload.alluser;
                return{...state,users:arr};
            }
        case "DELETE":{
            let index=state.findIndex(x=>x.userJson.id==action.payload);
            let arr=[...state]
            arr.splice(index,1);
            return{...state,users:arr}
        }
    }
}
export default appReducer


import { createStore } from 'redux'
import { Provider } from 'react-redux'
import appReducer from './CinemaWeb/appReducer'
const appStore = createStore(appReducer)

dispatch({ type: 'ADD',payload: user })

dispatch({ type: 'ADD',payload: obj })

const dispatch = useDispatch()

 case "DELETEALL":{
            let arr=users;
            let newarr=arr.map(x=>{
                return x=[]
            })
            return{users:arr};
        }



       <div className={showadd}>
                <UserCreate callback={closeadd} callback2={obj=>adduser(obj)}/>
            </div>


            const adduser =(obj)=>{
        let arr=users;
        arr.push(obj);
        setUsers(arr);
        setShowusers("hide")
        setButtonsMenu("show")
    }


        const closeadd =() =>{
        SetShowAdd("hide")
        setButtonsMenu("show")
    }

        const cngadd = () =>{
        if(showadd=="hide"){
            SetShowAdd("show")
            setButtonsMenu("hide")
        }
        else{
            SetShowAdd("hide")
        }
    }

    const [showadd,SetShowAdd] =useState("hide");



//////////////////////////////////////////////////////

const [permissions,setPermissions] = useState ({});
const [arrCheck,setArrCheck] = useState([false,false,false,false,false,false,false,false])

const checkTruePermissions = ()=>{
    let truePermissions="";
    let arrIndex = [];
   let newArrCheck = [...arrCheck]
if (permissions.viewSub){
    truePermissions+="viewSub, "
    arrIndex.push(0);
}
if (permissions.createSub){
    truePermissions+="createSub, "
    arrIndex.push(1);
}
if(permissions.deleteSub){
    truePermissions+="deleteSub, "
    arrIndex.push(2);
}
if(permissions.updateSub){
    truePermissions+="updateSub, "
    arrIndex.push(3);
}
if(permissions.viewMovies){
    truePermissions+=("viewMovies, ")
    arrIndex.push(4);
}
if(permissions.createMovies){
    truePermissions+="createMovies, "
    arrIndex.push(5);
}
if(permissions.deleteMovies){
    truePermissions+="deleteMovies, "
    arrIndex.push(6);
}
if(permissions.updateMovies){
    truePermissions+="updateMovies"
    arrIndex.push(7);
}
for(let i = 0;i<newArrCheck.length;i++){
    for(let j = 0 ;j<arrIndex.length;j++){
        if(arrIndex[j]==i){
            newArrCheck[i]=true;
        }
    }
}

return [truePermissions,newArrCheck];
}

<input type="checkbox" id="createSub" name="createSub" checked={newArrCheck[1]} onChange={e=>setPermissions({...permissions,createSub:e.target.checked,viewSub:true})} />create subscription<br />
    1


    //after that for add all perm
    // useEffect(()=>{
    //     // if(user.perm.permissions.includes("shemon visa")){
    //     //     console.log("shemon the king");
    //     // }


    //     console.log("asdasd");
        
    //     if(user.perm.permissions.includes("View Subscriptions")==true){
    //         console.log("inside view subs pre");
    //         setViewSubscription(!ViewSubscription);
    //         console.log(ViewSubscription);
    //         console.log("ViewSubsription");
    //     }
    //     if(user.perm.permissions.includes("Create Subscriptions")==true){
    //         setCreateSubscription(!CreateSubscription);
    //         console.log(CreateSubscription);
    //     }
    //     if(user.perm.permissions.includes("Delete Subscriptions")==true){
    //         setDeleteSubscription(!DeleteSubscription);
    //         console.log(DeleteSubscription);
    //     }
    //     if(user.perm.permissions.includes("Update Subscriptions")==true){
    //         setUpdateSubscription(!UpdateSubscription);
    //         console.log(UpdateSubscription);
    //     }
    //     if(user.perm.permissions.includes("View Movies")==true){
    //         setViewMovies(true);
    //         console.log(ViewMovies);
    //     }
    //     if(user.perm.permissions.includes("Create Movies")==true){
    //         setCreateMovies(true);
    //         console.log(CreateMovies);
    //     }
    //     if(user.perm.permissions.includes("Delete Movies")==true){
    //         setDeleteMovies(true);
    //         console.log(DeleteMovies);
    //     }
    //     if(user.perm.permissions.includes("Update Movies")==true){
    //         setUpdateMovies(true);
    //         console.log(UpdateMovies);
    //     }
    // },[])
if(props.movie.name.includes(props.search)==true || props.movie.name.toLowerCase().includes(props.search)==true){
        setShowmovie("show")
    }
    if(movie.name.includes(search)==true || movie.name.toLowerCase().includes(search)==true)


    <div className="row">
    {/* {props.match.params.id} <br/>
            {user.userJson.FirstName} <br/>
            {user.perm.permissions[0]} */}
            {/* only users with that peromsions */}
            <div className="row">
                <div className="hide"> 
                    <input type="button" value="Movies" onClick={GoToMovies}/>
                </div>
                <div>
                    <input type="button" value="Subscriptions" onClick={GoToSub}/>
                </div>
                <div>
                    <input type="button" value="UsersMangement" onClick={GoToUsersMan}/>
                </div>
            {/* everyone can see */}
                <input type="button" value="Logout" onClick={logout}/>
            </div>



            let check =async() =>{
        let a=await Utils.GetSubById(props.member._id);
        if(a.length==0){
            console.log("hey");
        }
        if(a==[]){
            console.log("[]");
        }
        if(a==undefined){
            console.log("un");
        }
        if(a==""){
            console.log("need to create");
        }
        if(isNaN(a)==true){
            console.log("Nan");
        }
        if(a==null){
            console.log("null");
        }
        let b=await Utils.GetSubById("6050aefd9e6f9f0db46c92dc")
        console.log(b);
        if(b==[]){
            console.log("arr");
        }
        else{
            console.log("not arr");
        }
        if(b==""){
            console.log("");
        }
        else{
            console.log("everything is good");
        }
    }



    let arr = resp.data[0].movies;
                    
                    
                    for(let i =0;i<arr.length;i++){
                    let movieObj = await utilis.getById("http://localhost:8001/api/movies",arr[i].movieId)
                    
                    arr3.push(movieObj.data)
                    }
                    setMoviesWatch(arr3)
                    getallMovies();







                    סבא 


                    const resp = await utilis.getAll("http://localhost:8001/api/members")
                     setAllMembers(resp.data);

let unWatchedMoives= [];
                     if(subscription.memberId!=""){
        for(let i =0;i<allMovies.length;i++){
            flage = true
        for(let j=0;j<subscription.movies.length;j++){
        if(allMovies[i]._id==subscription.movies[j].movieId){
            flage=false; 
        }
    }
        if(flage==true){
            unWatchedMoives.push(allMovies[i])
        }
       }
       
     optionItem = unWatchedMoives.map((movie,index)=>{
           return <option key={index} value={movie._id}>{movie.name}</option>
       })
    }


        // let obj2=movies.map((movie,index)=>{
    //     if(moviewatch.length>0){
    //         moviewatch.map((watch,index2)=>{
    //             console.log(watch.name);
    //             console.log(movie.name);//
    //             if(watch.name.indexOf(movie.name)==-1){
    //                 arr.push(<option key={index} value={movie._id}>{movie.name}</option>)
    //             }
    //         })
    //     }
    //     else{
    //         arr.push(<option key={index} value={movie._id}>{movie.name}</option>)
    //     }
    // })
    //option
    // console.log(subscription);
    // let obj=movies.map((movie,index)=>{
    //     if (moviewatch.length>0){
    //         if(index < moviewatch.length){
    //         if(moviewatch[index].name.indexOf(movie.name)==-1){
    //             return <option key={index} value={movie._id}>{movie.name}</option>
    //         }
    //     }
    //     }
    //     else{
    //         return <option key={index} value={movie._id}>{movie.name}</option>
    //     }
    // })
    

const [subs,setSubs] = useState([]);//מכיל את התעודות זהות של הממברים
const [members,setMembers] =  useState([]);
const [dates,setDates] = useState([])
const [timeOut,setTimeOut] = useContext(TimeOutContext)

useEffect(()=>{
    const getData = async () =>{
      let resp  = await utilis.getAll("http://localhost:8001/api/subsciptions");
      let arr = resp.data;
      let subArr = [];
      let dateArr = [];
      let d="";
      for(let i = 0;i<arr.length;i++){
        for(let j= 0 ;j<arr[i].movies.length;j++){
            if(arr[i].movies[j].movieId==props.movieId){
                subArr.push(arr[i].memberId);
                for(let k=0;k<10;k++){
                d+= arr[i].movies[j].date[k]
                }
                dateArr.push(d);
                d = "";
            }
        }
      }
      setSubs(subArr)
      setDates(dateArr)
    }
    getData()
},[props.movieId])

useEffect(()=>{
    const getData = async () =>{
        
    let membersArr = [];
    for(let i = 0;i<subs.length;i++){
      let resp  = await utilis.getById("http://localhost:8001/api/members",subs[i]);
      membersArr.push(resp.data);
    }
    setMembers(membersArr)
}
    getData()
},[subs])
    // let obj;
    // console.log(subscriptions);
    // console.log(members);
    // if(subscriptions==""){
    //     console.log("hey");
    // }
    // if(subscriptions._id==""){
    //     console.log("hey2");
    // }
    // if(subscriptions != undefined){
    //     if(members.length>0){
    //         for(let i=0;i<subscriptions.length;i++){
    //             for(let j=0;j<subscriptions[i].movies.length;j++){
    //                 if(subscriptions[i].movies[j].movidId==props.idmovie){

    //                 }
    //             }
    //         }
    //     }
    // }


  const deleteMovie = async()=>{
        let id = movie._id;
        let subIdArr =[];
        
        let resp2 = await utilis.getAll("http://localhost:8001/api/subsciptions");//לקיחת תעודות הזות של הסאב,מחיקת הסרט מן מהערך של הסרטים שהסאב ראה
        for(let i = 0;i<resp2.data.length;i++){
            for(let j= 0;j<resp2.data[i].movies;j++){
                if(resp2.data[i].movies[j].movieId==id){
                    subIdArr.push(resp2.data[i]._id)      
                    let newMoviesArr = [];
                    newMoviesArr = resp2.data[i].movies.splice(j,1);
                    resp2.data[i].movies = newMoviesArr;
                }
            }
        }
        for(let i =0 ;i<subIdArr.length;i++){//עדכון הסאב החדש מבלי הסרט שמוחקים 
            let subObj = {memberId:resp2.data[i].memberId,movies:resp2.data[i].movies};
            let resp3 = await utilis.update("http://localhost:8001/api/subsciptions",subIdArr[i],subObj)
        }



        let resp = await utilis.deleteItem("http://localhost:8001/api/movies",id);//מחיקת ההסרט עצמו
        alert(resp.data);
        setClassName1("hide");
        props.callback(true);
    }


    // see which subs show movies
                // let arr=[];
                // for(let i=0;i<arrsub.length;i++){
                //     let member=await Utils.GetMemberById(arrsub[i]);
                //     arr.push(member);
                // }
                // setMembers(arr);

                useEffect(()=>{
        const getData =  async() =>{

            let id = props.id;
            if(id!=undefined){
                let resp = await utilis.getById("http://localhost:8001/api/subsciptions",id);
                if(resp.data.length>0){//יש סאב קיים (רק בהרצה הנוכחית זה נמחק כל הרצה מחדש)
                    setSubscription(resp.data[0]);

                    //getMovieObj()
                    let arr3=[];
                    let arr = resp.data[0].movies;
                    
                    
                    for(let i =0;i<arr.length;i++){
                    let movieObj = await utilis.getById("http://localhost:8001/api/movies",arr[i].movieId)
                    
                    arr3.push(movieObj.data)
                    }
                    setMoviesWatch(arr3)
                    getallMovies();

                    
                   
                }      
        }
    }
                    
        
        getData()
    },[props.sub])

    && subscription.movies.length != 0